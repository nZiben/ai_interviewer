"""Streamlit User Interface for Survey"""
import streamlit as st
import os
import sys
from pathlib import Path
from src.database.db_handler import DBHandler
from src.llm.mistral_api_llm import MistralAPILLM
from src.stt.whisper_stt import WhisperSTT
from src.tts.edge_tts import EdgeTTS
from src.utils.audio_recorder import AudioRecorder
from src.database.models import SurveyResult
from src.utils.question_manager import QuestionManager
from src.utils.llm_evaluator import get_llm_feedback, get_llm_score
from streamlit_webrtc import webrtc_streamer, WebRtcMode, AudioProcessorBase
import queue
import threading
import wave
import numpy as np
import tempfile
from datetime import datetime
from typing import List, Dict, Any
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
root_dir = str(Path(__file__).parent.parent)
if root_dir not in sys.path:
    sys.path.append(root_dir)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–∑–¥–µ—Å—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ)
db_handler = DBHandler()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Mistral API LLM –∏ Edge TTS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
llm = MistralAPILLM()  # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MISTRAL_API_KEY –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
stt = WhisperSTT(model_name='base')
tts = EdgeTTS()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤
question_manager = QuestionManager(db_handler)

def save_answer(test_name: str, question: str, answer: str, score: int, feedback: str):
    """Save single answer to database using db_handler"""
    try:
        result = SurveyResult(
            test_name=test_name,
            first_name=st.session_state.get('first_name', ''),
            last_name=st.session_state.get('last_name', ''),
            question=question,
            answer=answer,
            score=score,
            llm_score=score,
            feedback=feedback,
            timestamp=datetime.now()
        )
        if db_handler.add_survey_result(result):
            st.success("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")

def display_summary(questions: list, answers: list, scores: list, feedback: list):
    """Display summary of survey results"""
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –æ–∫–Ω–∞—Ö
    for i, (question, answer, score, feedback_text) in enumerate(zip(questions, answers, scores, feedback), 1):
        with st.expander(f"–í–æ–ø—Ä–æ—Å {i}"):
            st.write(f"**–í–æ–ø—Ä–æ—Å:** {question}")
            st.write(f"**–í–∞—à –æ—Ç–≤–µ—Ç:** {answer}")
            st.write(f"**–û—Ü–µ–Ω–∫–∞:** {score}/5")
            st.write(f"**–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:** {feedback_text}")
    
    # Reset session state
    for key in ['test_started', 'current_question', 'answers', 'scores', 'feedback']:
        if key in st.session_state:
            del st.session_state[key]
    
    st.success("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

def main():
    st.title("AI –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä")
    
    # Initialize session state
    if 'test_started' not in st.session_state:
        st.session_state.test_started = False
    if 'current_question' not in st.session_state:
        st.session_state.current_question = 0
    if 'answers' not in st.session_state:
        st.session_state.answers = []
    if 'scores' not in st.session_state:
        st.session_state.scores = []
    if 'feedback' not in st.session_state:
        st.session_state.feedback = []
    
    # User registration
    if not st.session_state.test_started:
        st.header("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        col1, col2 = st.columns(2)
        with col1:
            st.session_state.first_name = st.text_input("–ò–º—è")
        with col2:
            st.session_state.last_name = st.text_input("–§–∞–º–∏–ª–∏—è")
        
        # Test selection
        available_tests = question_manager.get_all_tests()
        if not available_tests:
            st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
            return
        
        st.session_state.selected_test = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç", available_tests)
        
        if st.button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"):
            if not st.session_state.first_name or not st.session_state.last_name:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
                return
            
            st.session_state.test_started = True
            st.session_state.current_question = 0
            st.session_state.answers = []
            st.session_state.scores = []
            st.session_state.feedback = []
            st.rerun()
    
    # Test interface
    if st.session_state.test_started:
        # Get questions for selected test
        questions = question_manager.get_questions_for_test(st.session_state.selected_test)
        
        if not questions:
            st.warning("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
            return
        
        # Display current question
        if st.session_state.current_question < len(questions):
            current_question = questions[st.session_state.current_question]
            
            st.subheader(f"–í–æ–ø—Ä–æ—Å {st.session_state.current_question + 1} –∏–∑ {len(questions)}")
            st.write(current_question)
            
            # TTS –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
            if st.button("üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
                tts = EdgeTTS()
                tts.text_to_speech(current_question)
            
            # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ—Ç–≤–µ—Ç–∞
            response_method = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–≤–µ—Ç–∞",
                ["–¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥", "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥"],
                index=0
            )
            
            if response_method == "–¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥":
                answer = st.text_area("–í–∞—à –æ—Ç–≤–µ—Ç")
                if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"):
                    if answer:
                        # –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM
                        llm = MistralAPILLM()
                        score = get_llm_score(current_question, answer, llm)
                        feedback = get_llm_feedback(current_question, answer, llm)
                        
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ü–µ–Ω–∫–∏ –≤ session_state
                        st.session_state.answers.append(answer)
                        st.session_state.scores.append(score)
                        st.session_state.feedback.append(feedback)
                        
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        save_answer(
                            st.session_state.selected_test,
                            current_question,
                            answer,
                            score,
                            feedback
                        )
                        
                        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                        st.session_state.current_question += 1
                        st.rerun()
                    else:
                        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç")
            
            else:  # –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
                st.write("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å' –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ. –ù–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
                
                # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–±–æ—Ä–∞ –∞—É–¥–∏–æ —Ñ—Ä–µ–π–º–æ–≤
                audio_queue = queue.Queue()
                
                def audio_callback(audio_data):
                    audio_queue.put(audio_data)
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebRTC
                webrtc_ctx = webrtc_streamer(
                    key="speech-to-text",
                    mode=WebRtcMode.RECORDING,
                    rtc_configuration={"iceServers": [{"urls": ["stun:stun.l.google.com:19302"]}]},
                    media_stream_constraints={"video": False, "audio": True},
                    audio_receiver_size=1024,
                    audio_callback=audio_callback
                )
                
                if webrtc_ctx.state.playing:
                    st.write("üé§ –ó–∞–ø–∏—Å—å...")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                    audio_frames = []
                    while not audio_queue.empty():
                        audio_frames.append(audio_queue.get())
                    
                    if audio_frames:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_audio:
                            # –°–æ–∑–¥–∞–µ–º WAV —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                            with wave.open(temp_audio.name, 'wb') as wf:
                                wf.setnchannels(1)  # mono
                                wf.setsampwidth(2)  # 2 bytes per sample
                                wf.setframerate(16000)  # 16kHz
                                for frame in audio_frames:
                                    wf.writeframes(frame)
                            
                            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                            stt = WhisperSTT()
                            answer = stt.transcribe(temp_audio.name)
                            
                            if answer:
                                st.write("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", answer)
                                
                                # –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM
                                llm = MistralAPILLM()
                                score = get_llm_score(current_question, answer, llm)
                                feedback = get_llm_feedback(current_question, answer, llm)
                                
                                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ü–µ–Ω–∫–∏ –≤ session_state
                                st.session_state.answers.append(answer)
                                st.session_state.scores.append(score)
                                st.session_state.feedback.append(feedback)
                                
                                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                                save_answer(
                                    st.session_state.selected_test,
                                    current_question,
                                    answer,
                                    score,
                                    feedback
                                )
                                
                                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                                st.session_state.current_question += 1
                                st.rerun()
                            else:
                                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        os.unlink(temp_audio.name)
        
        # Display summary when all questions are answered
        if st.session_state.current_question >= len(questions):
            display_summary(
                questions,
                st.session_state.answers,
                st.session_state.scores,
                st.session_state.feedback
            )

if __name__ == "__main__":
    main()
